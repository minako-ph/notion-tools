import { DATABASE_ID, NOTION_TOKEN } from './main'

/**
 * Notion„Ç¢„Ç§„ÉÜ„É†„Çí‰ΩúÊàê„Åô„Çã
 * @param title „Çø„Ç§„Éà„É´
 * @param dateJP Êó•‰ªòÔºàÊó•Êú¨Ë™ûË°®Ë®òÔºâ
 * @param date Êó•‰ªò
 * @param link Trello„Ç´„Éº„Éâ„ÅÆ„É™„É≥„ÇØ
 * @param listId Trello„Ç´„Éº„Éâ„ÅÆ„É™„Çπ„ÉàID
 * @param cardId Trello„Ç´„Éº„Éâ„ÅÆ„Ç´„Éº„ÉâID
 */
export const createItem = (title: string, dateJP: string, date: string, link: string, listId: string, cardId: string): void => {
  const headers = {
    'Content-Type' : 'application/json; charset=UTF-8',
    'Authorization': 'Bearer '+ NOTION_TOKEN,
    'Notion-Version': '2021-05-13'
  }

  const data = {
    "parent": { "database_id": DATABASE_ID },
    "properties": {
      "Name": {
        "title": [
          {
            "text": {
              "content": title
            }
          }
        ]
      },
      "Êó•‰ªò": {
        "rich_text": [
          {
            "type": "text",
            "text": {
              "content": dateJP
            }
          },
        ]
      },
      "date": {
        "date": {
          "start": date
        }
      },
      "link": {
        "rich_text": [
          {
            "type": "text",
            "text": {
              "content": link
            }
          },
        ]
      },
      "list id": {
        "rich_text": [
          {
            "type": "text",
            "text": {
              "content": listId
            }
          },
        ]
      },
      "card id": {
        "rich_text": [
          {
            "type": "text",
            "text": {
              "content": cardId
            }
          },
        ]
      },
    }
  }

  const options = {
    'method' : 'POST',
    'headers': headers,
    'payload' : JSON.stringify(data),
    'muteHttpExceptions': true
  }

  const reqUrl = `https://api.notion.com/v1/pages`
  console.log('reqUrl')
  console.log(reqUrl)

  // @ts-ignore
  const result = UrlFetchApp.fetch(reqUrl, options)
  console.log('üêõdebug: result')
  console.log(result.getContentText())
}

/**
 * Êó¢Â≠ò„ÅÆ„Ç¢„Ç§„ÉÜ„É†„Çí„Ç¢„ÉÉ„Éó„Éá„Éº„Éà„Åô„Çã
 * @param title „Çø„Ç§„Éà„É´
 * @param dateJP Êó•‰ªòÔºàÊó•Êú¨Ë™ûË°®Ë®òÔºâ
 * @param date Êó•‰ªò
 * @param listId Trello„Ç´„Éº„Éâ„ÅÆ„É™„Çπ„ÉàID
 * @param itemId Notion„ÅÆ„Ç¢„Ç§„ÉÜ„É†ID
 */
export const updateItem = (title: string, dateJP: string, date: string, listId: string, itemId: string): void => {
  const headers = {
    'Content-Type' : 'application/json; charset=UTF-8',
    'Authorization': 'Bearer '+ NOTION_TOKEN,
    'Notion-Version': '2021-05-13'
  }

  const data = {
    "properties": {
      "Name": {
        "title": [
          {
            "text": {
              "content": title
            }
          }
        ]
      },
      "Êó•‰ªò": {
        "rich_text": [
          {
            "type": "text",
            "text": {
              "content": dateJP
            }
          },
        ]
      },
      "date": {
        "date": {
          "start": date
        }
      },
      "list id": {
        "rich_text": [
          {
            "type": "text",
            "text": {
              "content": listId
            }
          },
        ]
      },
    }
  }

  const options = {
    'method' : 'PATCH',
    'headers': headers,
    'payload' : JSON.stringify(data),
    'muteHttpExceptions': true
  }

  const reqUrl = `https://api.notion.com/v1/pages/${itemId}`
  console.log('reqUrl')
  console.log(reqUrl)

  // @ts-ignore
  const result = UrlFetchApp.fetch(reqUrl, options)
  console.log('üêõdebug: result')
  console.log(result.getContentText())
}

/**
 * ÊåáÂÆö„Åï„Çå„ÅüTrello„Ç´„Éº„ÉâID„ÅÆNotion„Ç¢„Ç§„ÉÜ„É†„ÇíËøî„Åô, ÁÑ°„Åë„Çå„Å∞null
 * @param listId Trello„Ç´„Éº„Éâ„ÅÆ„É™„Çπ„ÉàID
 * @param cardId Trello„Ç´„Éº„Éâ„ÅÆ„Ç´„Éº„ÉâID
 */
export const getItemId = (listId: string, cardId: string): string|null => {
  const headers = {
    'Content-Type' : 'application/json; charset=UTF-8',
    'Authorization': 'Bearer '+ NOTION_TOKEN,
    'Notion-Version': '2021-05-13'
  }

  const data = {
    "filter": {
      "and": [
        {
          "property": "list id",
          "text": {
            "equals": listId
          }
        },
        {
          "property": "card id",
          "text": {
            "equals": cardId
          }
        }
      ]
    }
  }

  const options = {
    'method' : 'POST',
    'headers': headers,
    'payload' : JSON.stringify(data),
    'muteHttpExceptions': true
  }

  const reqUrl = `https://api.notion.com/v1/databases/${DATABASE_ID}/query`
  console.log('reqUrl')
  console.log(reqUrl)

  // @ts-ignore
  const result = UrlFetchApp.fetch(reqUrl, options)
  const results = JSON.parse(result.getContentText())['results']

  // NOTE: 1„Å§„Åó„Åã„Éí„ÉÉ„Éà„Åó„Å™„ÅÑ„Å®„Åó„Å¶0ÂÄãÁõÆ„ÅÆÊÉÖÂ†±„ÇíËøî„Åô
  return results.length > 0 ? results[0]['id'] : null
}

/**
 * „Ç¢„Ç§„ÉÜ„É†„ÅÆÂâäÈô§
 * @param itemId Notion„ÅÆ„Ç¢„Ç§„ÉÜ„É†ID
 */
export const deleteItem = (itemId: string) => {
  _toggleItemDeleted(true, itemId)
}

/**
 * „Ç¢„Ç§„ÉÜ„É†„ÅÆÂæ©Ê¥ª
 * @param itemId Notion„ÅÆ„Ç¢„Ç§„ÉÜ„É†ID
 */
export const restoreItem = (itemId: string) => {
  _toggleItemDeleted(false, itemId)
}

const _toggleItemDeleted = (deleted: boolean, itemId: string) => {
  const headers = {
    'Content-Type' : 'application/json; charset=UTF-8',
    'Authorization': 'Bearer '+ NOTION_TOKEN,
    'Notion-Version': '2021-05-13'
  }

  const data = {
    "properties": {
      "is deleted": {
        "checkbox": deleted
      },
    }
  }

  const options = {
    'method' : 'PATCH',
    'headers': headers,
    'payload' : JSON.stringify(data),
    'muteHttpExceptions': true
  }

  const reqUrl = `https://api.notion.com/v1/pages/${itemId}`
  console.log('reqUrl')
  console.log(reqUrl)

  // @ts-ignore
  const result = UrlFetchApp.fetch(reqUrl, options)
  console.log('üêõdebug: result')
  console.log(result.getContentText())
}

